name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin toml
      
      - name: Determine version (for main push)
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        id: version
        run: |
          # Get current package version from Poetry section of pyproject.toml
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          
          # Calculate new version (patch increment)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          
          # Update pyproject.toml with new version
          python -c "
          import toml
          data = toml.load('pyproject.toml')
          data['tool']['poetry']['version'] = '$NEW_VERSION'
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          "
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
        shell: bash
      
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --strip --out dist --interpreter python3.12
          
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  release:
    name: Create GitHub Release
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.12 (for main push)
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies (for main push)
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: |
          python -m pip install --upgrade pip
          pip install toml
      
      - name: Get version from pyproject.toml (for main push)
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Get tag version (for tag push)
        if: startsWith(github.ref, 'refs/tags/')
        id: get_tag_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
      
      - name: Set release version
        id: set_version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version=${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.get_tag_version.outputs.version }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release v${{ steps.set_version.outputs.version }}"
          tag_name: "v${{ steps.set_version.outputs.version }}"
          files: dist/*
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Commit version changes (for main push)
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.set_version.outputs.version }}"
          git tag -a "v${{ steps.set_version.outputs.version }}" -m "Release v${{ steps.set_version.outputs.version }}"
          git push
          git push --tags